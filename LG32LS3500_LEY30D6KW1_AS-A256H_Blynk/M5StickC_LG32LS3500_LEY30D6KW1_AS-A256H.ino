#include <M5StickC.h>
#include <BlynkSimpleEsp32_BLE.h>
#include <IRremote.h>
#define BLYNK_PRINT Serial
#define BLYNK_USE_DIRECT_CONNECT

char auth[] = "************";
//LG 32LS3500
unsigned int   tv_power[]     = {9000,4500,560,560,560,560,560,1690,560,560,560,560,560,560,560,560,560,560,560,1690,560,1690,560,560,560,1690,560,1690,560,1690,560,1690,560,1690,560,560,560,560,560,560,560,1690,560,560,560,560,560,560,560,560,560,1690,560,1690,560,1690,560,560,560,1690,560,1690,560,1690,560,1690,560};
//ohm electric LE-Y30D6K-W
unsigned int   led_power[]    = {3552, 1662,  450, 1286,  450, 394,  450, 1288,  448, 394,  450, 1286,  450, 1288,  472, 1264,  450, 394,  450, 392,  450, 1288,  450, 394,  448, 394,  450, 1286,  450, 394,  450, 392,  450, 394,  448, 1288,  450, 394,  450, 394,  448, 394,  450, 394,  450, 392,  450, 392,  450, 394,  450, 1288,  450, 1288,  448, 1288,  472, 1266,  450, 392,  450, 1286,  450, 394,  450, 1286,  474, 1264,  450, 394,  472, 370,  450, 394,  448, 394,  472, 370,  450, 392,  446, 398,  448, 394,  450, 1288,  448, 1288,  450, 1286,  472, 1264,  472, 1264,  472, 1266,  448, 1288,  450};  // PANASONIC AE4880F5807F
//Fujitsu AS-A256H
unsigned int   ac_power_on[]  = {3308, 1598,  448, 364,  448, 366,  448, 1178,  448, 364,  448, 1178,  448, 364,  448, 364,  450, 364,  448, 1178,  448, 1178,  448, 362,  450, 364,  448, 364,  448, 1178,  448, 1176,  450, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 364,  448, 1182,  444, 366,  448, 364,  448, 364,  448, 366,  448, 364,  448, 366,  448, 366,  448, 1178,  448, 362,  450, 364,  448, 366,  448, 364,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 1178,  448, 366,  448, 1178,  448, 366,  448, 362,  450, 366,  448, 366,  446, 1180,  448, 366,  448, 366,  446, 366,  448, 366,  446, 366,  448, 1180,  446, 366,  446, 1180,  446, 366,  446, 366,  446, 1180,  446, 366,  446, 366,  446, 366,  446, 1180,  446, 366,  446, 366,  446, 366,  444, 368,  446, 366,  446, 366,  446, 366,  446, 366,  446, 366,  446, 368,  446, 368,  444, 368,  446, 366,  446, 366,  446, 366,  446, 366,  446, 368,  444, 368,  446, 366,  446, 364,  448, 368,  446, 366,  444, 370,  446, 368,  446, 366,  448, 362,  448, 366,  446, 366,  446, 366,  446, 368,  446, 366,  446, 366,  446, 368,  446, 366,  446, 366,  446, 366,  446, 366,  446, 364,  448, 366,  446, 368,  446, 366,  446, 366,  446, 368,  446, 364,  448, 366,  446, 368,  446, 366,  446, 368,  446, 368,  448, 1178,  446, 366,  446, 368,  446, 1180,  446, 366,  446, 366,  446, 366,  446, 1180,  446, 1180,  446, 366,  446, 366,  446, 366,  446, 366,  446, 364,  448, 368,  446, 1182,  444, 368,  446, 368,  444, 368,  446, 366,  446, 1182,  446, 366,  446, 366,  448};  // UNKNOWN BF787C
unsigned int   ac_power_off[] = {3308, 1600,  446, 366,  446, 366,  446, 1180,  446, 368,  446, 1180,  446, 366,  446, 366,  446, 366,  446, 1180,  450, 1176,  446, 368,  446, 366,  446, 366,  446, 1180,  446, 1180,  446, 366,  450, 362,  446, 366,  446, 366,  446, 366,  446, 366,  446, 366,  446, 366,  446, 366,  446, 368,  446, 366,  446, 366,  446, 368,  446, 1180,  446, 366,  448, 366,  446, 364,  448, 366,  446, 366,  446, 366,  446, 366,  448, 1180,  446, 366,  444, 370,  446, 366,  446, 366,  446, 1180,  448, 366,  446, 366,  446, 366,  446, 366,  446, 366,  446, 368,  446, 1180,  446, 366,  446, 1180,  446, 1180,  446, 1180,  446, 1180,  446, 1178,  446, 1180,  446};  // FUJITSU_AC
const uint16_t kIrLed = 26;
const uint16_t Led = 10;
IRsend irsend(kIrLed);

void blink_led(){
  digitalWrite(Led,0);
  delay(500);
  digitalWrite(Led,1);
}

void show(char *name) {
  M5.Lcd.setCursor(0, 30, 2);
  M5.Lcd.print(name);
}
  //tv power
  BLYNK_WRITE(V0){
      show("TV POWER");
      blink_led();
      irsend.sendRaw(tv_power, sizeof(tv_power)/sizeof(int), 38);
      delay(500);
  }
  
  //light power
  BLYNK_WRITE(V1) {
      show("LIGHT POWER");
      blink_led();
      irsend.sendRaw(led_power, sizeof(led_power)/sizeof(int), 38); 
      delay(500);
  }
  
  //air conditioner auto mode
  BLYNK_WRITE(V2) {
      show("AC AUTO");
      blink_led();
      irsend.sendRaw(ac_power_on, sizeof(ac_power_on)/sizeof(int), 38); 
      delay(500);
  }

  //air conditioner stop
  BLYNK_WRITE(V3) {
      show("AC STOP");
      blink_led();
      irsend.sendRaw(ac_power_off, sizeof(ac_power_off)/sizeof(int), 38); 
      delay(500);
  }



void setup()
{
  Blynk.setDeviceName("Blynk");
  Blynk.begin(auth);

  M5.begin();
  M5.Lcd.setRotation(1);
  M5.Lcd.setTextSize(1);
  
  Serial.begin(115200);
 
  pinMode(kIrLed,OUTPUT);
  pinMode(Led,OUTPUT);
  digitalWrite(kIrLed,1);
  digitalWrite(Led,1); 
 }

void loop()
{
  M5.update();
  Blynk.run();
}
